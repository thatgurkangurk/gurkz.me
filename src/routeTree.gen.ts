/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MusicRouteImport } from './routes/music'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ToolsIndexRouteImport } from './routes/tools/index'
import { Route as ToolsWebhookDestroyerRouteImport } from './routes/tools/webhook-destroyer'
import { ServerRoute as ApiStonksDotjsServerRouteImport } from './routes/api.stonks[.]js'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api.$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api.rpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api.auth.$'
import { ServerRoute as UpdaterSoundpadTargetVersionServerRouteImport } from './routes/updater.soundpad.$target.$version'

const rootServerRouteImport = createServerRootRoute()

const MusicRoute = MusicRouteImport.update({
  id: '/music',
  path: '/music',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsIndexRoute = ToolsIndexRouteImport.update({
  id: '/tools/',
  path: '/tools/',
  getParentRoute: () => rootRouteImport,
} as any)
const ToolsWebhookDestroyerRoute = ToolsWebhookDestroyerRouteImport.update({
  id: '/tools/webhook-destroyer',
  path: '/tools/webhook-destroyer',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiStonksDotjsServerRoute = ApiStonksDotjsServerRouteImport.update({
  id: '/api/stonks.js',
  path: '/api/stonks.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const UpdaterSoundpadTargetVersionServerRoute =
  UpdaterSoundpadTargetVersionServerRouteImport.update({
    id: '/updater/soundpad/$target/$version',
    path: '/updater/soundpad/$target/$version',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/music': typeof MusicRoute
  '/tools/webhook-destroyer': typeof ToolsWebhookDestroyerRoute
  '/tools': typeof ToolsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/music': typeof MusicRoute
  '/tools/webhook-destroyer': typeof ToolsWebhookDestroyerRoute
  '/tools': typeof ToolsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/music': typeof MusicRoute
  '/tools/webhook-destroyer': typeof ToolsWebhookDestroyerRoute
  '/tools/': typeof ToolsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/music' | '/tools/webhook-destroyer' | '/tools'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/music' | '/tools/webhook-destroyer' | '/tools'
  id: '__root__' | '/' | '/music' | '/tools/webhook-destroyer' | '/tools/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MusicRoute: typeof MusicRoute
  ToolsWebhookDestroyerRoute: typeof ToolsWebhookDestroyerRoute
  ToolsIndexRoute: typeof ToolsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/stonks.js': typeof ApiStonksDotjsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/updater/soundpad/$target/$version': typeof UpdaterSoundpadTargetVersionServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/stonks.js': typeof ApiStonksDotjsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/updater/soundpad/$target/$version': typeof UpdaterSoundpadTargetVersionServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/stonks.js': typeof ApiStonksDotjsServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/updater/soundpad/$target/$version': typeof UpdaterSoundpadTargetVersionServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/$'
    | '/api/stonks.js'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/updater/soundpad/$target/$version'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/$'
    | '/api/stonks.js'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/updater/soundpad/$target/$version'
  id:
    | '__root__'
    | '/api/$'
    | '/api/stonks.js'
    | '/api/auth/$'
    | '/api/rpc/$'
    | '/updater/soundpad/$target/$version'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiStonksDotjsServerRoute: typeof ApiStonksDotjsServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
  UpdaterSoundpadTargetVersionServerRoute: typeof UpdaterSoundpadTargetVersionServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/music': {
      id: '/music'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof MusicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/': {
      id: '/tools/'
      path: '/tools'
      fullPath: '/tools'
      preLoaderRoute: typeof ToolsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tools/webhook-destroyer': {
      id: '/tools/webhook-destroyer'
      path: '/tools/webhook-destroyer'
      fullPath: '/tools/webhook-destroyer'
      preLoaderRoute: typeof ToolsWebhookDestroyerRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/stonks.js': {
      id: '/api/stonks.js'
      path: '/api/stonks.js'
      fullPath: '/api/stonks.js'
      preLoaderRoute: typeof ApiStonksDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/updater/soundpad/$target/$version': {
      id: '/updater/soundpad/$target/$version'
      path: '/updater/soundpad/$target/$version'
      fullPath: '/updater/soundpad/$target/$version'
      preLoaderRoute: typeof UpdaterSoundpadTargetVersionServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MusicRoute: MusicRoute,
  ToolsWebhookDestroyerRoute: ToolsWebhookDestroyerRoute,
  ToolsIndexRoute: ToolsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiStonksDotjsServerRoute: ApiStonksDotjsServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
  UpdaterSoundpadTargetVersionServerRoute:
    UpdaterSoundpadTargetVersionServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
